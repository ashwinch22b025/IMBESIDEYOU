{"version":3,"sources":["Context/ChatProvider.js","components/Authentication/Login.js","components/Authentication/Signup.js","Pages/Homepage.js","config/ChatLogics.js","components/miscellaneous/ProfileModal.js","components/ScrollableChat.js","components/userAvatar/UserBadgeItem.js","components/userAvatar/UserListItem.js","components/miscellaneous/UpdateGroupChatModal.js","components/Call.js","components/SingleChat.js","components/Chatbox.js","components/ChatLoading.js","components/miscellaneous/GroupChatModal.js","components/MyChats.js","components/miscellaneous/SideDrawer.js","Pages/Chatpage.js","App.js","reportWebVitals.js","index.js"],"names":["ChatContext","createContext","ChatState","useContext","ChatProvider","_ref","children","selectedChat","setSelectedChat","useState","user","setUser","notification","setNotification","chats","setChats","history","useHistory","useEffect","userInfo","JSON","parse","localStorage","getItem","push","_jsx","Provider","value","Login","show","setShow","toast","useToast","email","setEmail","password","setPassword","loading","setLoading","_jsxs","VStack","spacing","FormControl","id","isRequired","FormLabel","Input","type","placeholder","onChange","e","target","InputGroup","size","InputRightElement","width","Button","h","onClick","handleClick","colorScheme","style","marginTop","async","title","status","duration","isClosable","position","config","headers","data","axios","post","setItem","stringify","error","description","response","message","isLoading","variant","Signup","name","setName","confirmpassword","setConfirmpassword","pic","setPic","picLoading","setPicLoading","p","accept","pics","undefined","console","log","FormData","append","fetch","method","body","then","res","json","url","toString","catch","err","postDetails","files","Homepage","Container","maxW","centerContent","Box","d","justifyContent","bg","w","m","borderRadius","borderWidth","Text","fontSize","fontFamily","Tabs","isFitted","TabList","mb","Tab","TabPanels","TabPanel","isSameSenderMargin","messages","i","userId","length","sender","_id","isSameSender","isLastMessage","isSameUser","getSender","loggedUser","users","_users$","ProfileModal","isOpen","onOpen","onClose","useDisclosure","_Fragment","IconButton","base","icon","ViewIcon","Modal","isCentered","ModalOverlay","ModalContent","ModalHeader","ModalCloseButton","ModalBody","flexDir","alignItems","Image","boxSize","src","alt","md","ModalFooter","ScrollableChat","ScrollableFeed","map","display","Tooltip","label","placement","hasArrow","Avatar","mt","mr","cursor","backgroundColor","marginLeft","padding","maxWidth","content","UserBadgeItem","handleFunction","admin","Badge","px","py","CloseIcon","pl","UserListItem","_hover","background","color","UpdateGroupChatModal","fetchMessages","fetchAgain","setFetchAgain","groupChatName","setGroupChatName","search","setSearch","searchResult","setSearchResult","renameloading","setRenameLoading","handleAddUser","find","u","user1","groupAdmin","Authorization","token","put","chatId","handleRemove","chatName","flexWrap","pb","ml","query","get","handleSearch","Spinner","Call","localStream","setLocalStream","remoteStream","setRemoteStream","peerConnection","setPeerConnection","isAudioMuted","setIsAudioMuted","isVideoMuted","setIsVideoMuted","caller","setCaller","isCallAnswered","setIsCallAnswered","offer","setOffer","onCloseModal","localVideoRef","useRef","remoteVideoRef","socketRef","hangUp","close","current","emit","io","handleCallInitiated","callData","receiverId","on","handleCallAnswered","handleCallRejected","handleIceCandidate","candidate","addIceCandidate","RTCIceCandidate","off","disconnect","navigator","mediaDevices","getUserMedia","video","audio","stream","srcObject","createPeerConnection","pc","RTCPeerConnection","iceServers","urls","getTracks","forEach","track","addTrack","onicecandidate","event","ontrack","streams","handleOffer","sendOffer","createOffer","setLocalDescription","callerId","setRemoteDescription","RTCSessionDescription","answer","createAnswer","Flex","direction","toggleAudioMute","getAudioTracks","enabled","toggleVideoMute","getVideoTracks","flex","ref","autoPlay","muted","answerCall","rejectCall","socket","selectedChatCompare","SingleChat","setMessages","newMessage","setNewMessage","socketConnected","setSocketConnected","typing","setTyping","istyping","setIsTyping","isCallInitiated","setIsCallInitiated","roomId","setRoomId","defaultOptions","loop","autoplay","animationData","rendererSettings","preserveAspectRatio","newMessageReceived","chat","includes","ArrowBackIcon","isGroupChat","toUpperCase","overflowY","alignSelf","margin","className","onKeyDown","key","Lottie","options","marginBottom","lastTypingTime","Date","getTime","setTimeout","aria-label","PhoneIcon","handleCallInitiate","newRoomId","uuidv4","handleCallClose","getSenderFull","Chatbox","ChatLoading","Stack","Skeleton","height","GroupChatModal","selectedUsers","setSelectedUsers","handleDelete","delUser","filter","sel","slice","handleGroup","userToAdd","MyChats","setLoggedUser","fetchChats","lg","rightIcon","AddIcon","latestMessage","substring","SideDrawer","loadingChat","setLoadingChat","accessChat","c","fontWeight","Menu","MenuButton","NotificationBadge","count","effect","Effect","SCALE","BellIcon","MenuList","notif","MenuItem","n","as","ChevronDownIcon","MenuDivider","logoutHandler","removeItem","Drawer","DrawerOverlay","DrawerContent","DrawerHeader","borderBottomWidth","DrawerBody","Chatpage","activeTab","setActiveTab","flexDirection","isLazy","index","App","Route","path","component","exact","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","ChakraProvider","BrowserRouter","document","getElementById"],"mappings":"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","file":"static/js/main.b82d6db0.chunk.js","sourcesContent":["import React, { createContext, useContext, useEffect, useState } from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\nconst ChatContext = createContext();\r\n\r\nconst ChatProvider = ({ children }) => {\r\n  const [selectedChat, setSelectedChat] = useState();\r\n  const [user, setUser] = useState();\r\n  const [notification, setNotification] = useState([]);\r\n  const [chats, setChats] = useState();\r\n\r\n  const history = useHistory();\r\n\r\n  useEffect(() => {\r\n    const userInfo = JSON.parse(localStorage.getItem(\"userInfo\"));\r\n    setUser(userInfo);\r\n\r\n    if (!userInfo) history.push(\"/\");\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [history]);\r\n\r\n  return (\r\n    <ChatContext.Provider\r\n      value={{\r\n        selectedChat,\r\n        setSelectedChat,\r\n        user,\r\n        setUser,\r\n        notification,\r\n        setNotification,\r\n        chats,\r\n        setChats,\r\n      }}\r\n    >\r\n      {children}\r\n    </ChatContext.Provider>\r\n  );\r\n};\r\n\r\nexport const ChatState = () => {\r\n  return useContext(ChatContext);\r\n};\r\n\r\nexport default ChatProvider;\r\n","import { Button } from \"@chakra-ui/button\";\r\nimport { FormControl, FormLabel } from \"@chakra-ui/form-control\";\r\nimport { Input, InputGroup, InputRightElement } from \"@chakra-ui/input\";\r\nimport { VStack } from \"@chakra-ui/layout\";\r\nimport { useState } from \"react\";\r\nimport axios from \"axios\";\r\nimport { useToast } from \"@chakra-ui/react\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { ChatState } from \"../../Context/ChatProvider\";\r\n\r\nconst Login = () => {\r\n  const [show, setShow] = useState(false);\r\n  const handleClick = () => setShow(!show);\r\n  const toast = useToast();\r\n  const [email, setEmail] = useState();\r\n  const [password, setPassword] = useState();\r\n  const [loading, setLoading] = useState(false);\r\n\r\n  const history = useHistory();\r\n  const { setUser } = ChatState();\r\n\r\n  const submitHandler = async () => {\r\n    setLoading(true);\r\n    if (!email || !password) {\r\n      toast({\r\n        title: \"Please Fill all the Feilds\",\r\n        status: \"warning\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n      setLoading(false);\r\n      return;\r\n    }\r\n\r\n    try {\r\n      const config = {\r\n        headers: {\r\n          \"Content-type\": \"application/json\",\r\n        },\r\n      };\r\n\r\n      const { data } = await axios.post(\r\n        \"/api/user/login\",\r\n        { email, password },\r\n        config\r\n      );\r\n\r\n      toast({\r\n        title: \"Login Successful\",\r\n        status: \"success\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n      setUser(data);\r\n      localStorage.setItem(\"userInfo\", JSON.stringify(data));\r\n      setLoading(false);\r\n      history.push(\"/chats\");\r\n    } catch (error) {\r\n      toast({\r\n        title: \"Error Occured!\",\r\n        description: error.response.data.message,\r\n        status: \"error\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <VStack spacing=\"10px\">\r\n      <FormControl id=\"email\" isRequired>\r\n        <FormLabel>Email Address</FormLabel>\r\n        <Input\r\n          value={email}\r\n          type=\"email\"\r\n          placeholder=\"Enter Your Email Address\"\r\n          onChange={(e) => setEmail(e.target.value)}\r\n        />\r\n      </FormControl>\r\n      <FormControl id=\"password\" isRequired>\r\n        <FormLabel>Password</FormLabel>\r\n        <InputGroup size=\"md\">\r\n          <Input\r\n            value={password}\r\n            onChange={(e) => setPassword(e.target.value)}\r\n            type={show ? \"text\" : \"password\"}\r\n            placeholder=\"Enter password\"\r\n          />\r\n          <InputRightElement width=\"4.5rem\">\r\n            <Button h=\"1.75rem\" size=\"sm\" onClick={handleClick}>\r\n              {show ? \"Hide\" : \"Show\"}\r\n            </Button>\r\n          </InputRightElement>\r\n        </InputGroup>\r\n      </FormControl>\r\n      <Button\r\n        colorScheme=\"blue\"\r\n        width=\"100%\"\r\n        style={{ marginTop: 15 }}\r\n        onClick={submitHandler}\r\n        isLoading={loading}\r\n      >\r\n        Login\r\n      </Button>\r\n      <Button\r\n        variant=\"solid\"\r\n        colorScheme=\"red\"\r\n        width=\"100%\"\r\n        onClick={() => {\r\n          setEmail(\"guest@example.com\");\r\n          setPassword(\"123456\");\r\n        }}\r\n      >\r\n        Get Guest User Credentials\r\n      </Button>\r\n    </VStack>\r\n  );\r\n};\r\n\r\nexport default Login;\r\n","import { Button } from \"@chakra-ui/button\";\r\nimport { FormControl, FormLabel } from \"@chakra-ui/form-control\";\r\nimport { Input, InputGroup, InputRightElement } from \"@chakra-ui/input\";\r\nimport { VStack } from \"@chakra-ui/layout\";\r\nimport { useToast } from \"@chakra-ui/toast\";\r\nimport axios from \"axios\";\r\nimport { useState } from \"react\";\r\nimport { useHistory } from \"react-router\";\r\n\r\nconst Signup = () => {\r\n  const [show, setShow] = useState(false);\r\n  const handleClick = () => setShow(!show);\r\n  const toast = useToast();\r\n  const history = useHistory();\r\n\r\n  const [name, setName] = useState();\r\n  const [email, setEmail] = useState();\r\n  const [confirmpassword, setConfirmpassword] = useState();\r\n  const [password, setPassword] = useState();\r\n  const [pic, setPic] = useState();\r\n  const [picLoading, setPicLoading] = useState(false);\r\n\r\n  const submitHandler = async () => {\r\n    setPicLoading(true);\r\n    if (!name || !email || !password || !confirmpassword) {\r\n      toast({\r\n        title: \"Please Fill all the Feilds\",\r\n        status: \"warning\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n      setPicLoading(false);\r\n      return;\r\n    }\r\n    if (password !== confirmpassword) {\r\n      toast({\r\n        title: \"Passwords Do Not Match\",\r\n        status: \"warning\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n      return;\r\n    }\r\n    console.log(name, email, password, pic);\r\n    try {\r\n      const config = {\r\n        headers: {\r\n          \"Content-type\": \"application/json\",\r\n        },\r\n      };\r\n      const { data } = await axios.post(\r\n        \"/api/user\",\r\n        {\r\n          name,\r\n          email,\r\n          password,\r\n          pic,\r\n        },\r\n        config\r\n      );\r\n      console.log(data);\r\n      toast({\r\n        title: \"Registration Successful\",\r\n        status: \"success\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n      localStorage.setItem(\"userInfo\", JSON.stringify(data));\r\n      setPicLoading(false);\r\n      history.push(\"/chats\");\r\n    } catch (error) {\r\n      toast({\r\n        title: \"Error Occured!\",\r\n        description: error.response.data.message,\r\n        status: \"error\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n      setPicLoading(false);\r\n    }\r\n  };\r\n\r\n  const postDetails = (pics) => {\r\n    setPicLoading(true);\r\n    if (pics === undefined) {\r\n      toast({\r\n        title: \"Please Select an Image!\",\r\n        status: \"warning\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n      return;\r\n    }\r\n    console.log(pics);\r\n    if (pics.type === \"image/jpeg\" || pics.type === \"image/png\") {\r\n      const data = new FormData();\r\n      data.append(\"file\", pics);\r\n      data.append(\"upload_preset\", \"chat-app\");\r\n      data.append(\"cloud_name\", \"piyushproj\");\r\n      fetch(\"https://api.cloudinary.com/v1_1/piyushproj/image/upload\", {\r\n        method: \"post\",\r\n        body: data,\r\n      })\r\n        .then((res) => res.json())\r\n        .then((data) => {\r\n          setPic(data.url.toString());\r\n          console.log(data.url.toString());\r\n          setPicLoading(false);\r\n        })\r\n        .catch((err) => {\r\n          console.log(err);\r\n          setPicLoading(false);\r\n        });\r\n    } else {\r\n      toast({\r\n        title: \"Please Select an Image!\",\r\n        status: \"warning\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n      setPicLoading(false);\r\n      return;\r\n    }\r\n  };\r\n\r\n  return (\r\n    <VStack spacing=\"5px\">\r\n      <FormControl id=\"first-name\" isRequired>\r\n        <FormLabel>Name</FormLabel>\r\n        <Input\r\n          placeholder=\"Enter Your Name\"\r\n          onChange={(e) => setName(e.target.value)}\r\n        />\r\n      </FormControl>\r\n      <FormControl id=\"email\" isRequired>\r\n        <FormLabel>Email Address</FormLabel>\r\n        <Input\r\n          type=\"email\"\r\n          placeholder=\"Enter Your Email Address\"\r\n          onChange={(e) => setEmail(e.target.value)}\r\n        />\r\n      </FormControl>\r\n      <FormControl id=\"password\" isRequired>\r\n        <FormLabel>Password</FormLabel>\r\n        <InputGroup size=\"md\">\r\n          <Input\r\n            type={show ? \"text\" : \"password\"}\r\n            placeholder=\"Enter Password\"\r\n            onChange={(e) => setPassword(e.target.value)}\r\n          />\r\n          <InputRightElement width=\"4.5rem\">\r\n            <Button h=\"1.75rem\" size=\"sm\" onClick={handleClick}>\r\n              {show ? \"Hide\" : \"Show\"}\r\n            </Button>\r\n          </InputRightElement>\r\n        </InputGroup>\r\n      </FormControl>\r\n      <FormControl id=\"password\" isRequired>\r\n        <FormLabel>Confirm Password</FormLabel>\r\n        <InputGroup size=\"md\">\r\n          <Input\r\n            type={show ? \"text\" : \"password\"}\r\n            placeholder=\"Confirm password\"\r\n            onChange={(e) => setConfirmpassword(e.target.value)}\r\n          />\r\n          <InputRightElement width=\"4.5rem\">\r\n            <Button h=\"1.75rem\" size=\"sm\" onClick={handleClick}>\r\n              {show ? \"Hide\" : \"Show\"}\r\n            </Button>\r\n          </InputRightElement>\r\n        </InputGroup>\r\n      </FormControl>\r\n      <FormControl id=\"pic\">\r\n        <FormLabel>Upload your Picture</FormLabel>\r\n        <Input\r\n          type=\"file\"\r\n          p={1.5}\r\n          accept=\"image/*\"\r\n          onChange={(e) => postDetails(e.target.files[0])}\r\n        />\r\n      </FormControl>\r\n      <Button\r\n        colorScheme=\"blue\"\r\n        width=\"100%\"\r\n        style={{ marginTop: 15 }}\r\n        onClick={submitHandler}\r\n        isLoading={picLoading}\r\n      >\r\n        Sign Up\r\n      </Button>\r\n    </VStack>\r\n  );\r\n};\r\n\r\nexport default Signup;\r\n","import {\r\n  Box,\r\n  Container,\r\n  Tab,\r\n  TabList,\r\n  TabPanel,\r\n  TabPanels,\r\n  Tabs,\r\n  Text,\r\n} from \"@chakra-ui/react\";\r\nimport { useEffect } from \"react\";\r\nimport { useHistory } from \"react-router\";\r\nimport Login from \"../components/Authentication/Login\";\r\nimport Signup from \"../components/Authentication/Signup\";\r\n\r\nfunction Homepage() {\r\n  const history = useHistory();\r\n\r\n  useEffect(() => {\r\n    const user = JSON.parse(localStorage.getItem(\"userInfo\"));\r\n\r\n    if (user) history.push(\"/chats\");\r\n  }, [history]);\r\n\r\n  return (\r\n    <Container maxW=\"xl\" centerContent>\r\n      <Box\r\n        d=\"flex\"\r\n        justifyContent=\"center\"\r\n        p={3}\r\n        bg=\"white\"\r\n        w=\"100%\"\r\n        m=\"40px 0 15px 0\"\r\n        borderRadius=\"lg\"\r\n        borderWidth=\"1px\"\r\n      >\r\n        <Text fontSize=\"4xl\" fontFamily=\"Work sans\">\r\n          Talk-A-Tive\r\n        </Text>\r\n      </Box>\r\n      <Box bg=\"white\" w=\"100%\" p={4} borderRadius=\"lg\" borderWidth=\"1px\">\r\n        <Tabs isFitted variant=\"soft-rounded\">\r\n          <TabList mb=\"1em\">\r\n            <Tab>Login</Tab>\r\n            <Tab>Sign Up</Tab>\r\n          </TabList>\r\n          <TabPanels>\r\n            <TabPanel>\r\n              <Login />\r\n            </TabPanel>\r\n            <TabPanel>\r\n              <Signup />\r\n            </TabPanel>\r\n          </TabPanels>\r\n        </Tabs>\r\n      </Box>\r\n    </Container>\r\n  );\r\n}\r\n\r\nexport default Homepage;\r\n","export const isSameSenderMargin = (messages, m, i, userId) => {\r\n  // console.log(i === messages.length - 1);\r\n\r\n  if (\r\n    i < messages.length - 1 &&\r\n    messages[i + 1].sender._id === m.sender._id &&\r\n    messages[i].sender._id !== userId\r\n  )\r\n    return 33;\r\n  else if (\r\n    (i < messages.length - 1 &&\r\n      messages[i + 1].sender._id !== m.sender._id &&\r\n      messages[i].sender._id !== userId) ||\r\n    (i === messages.length - 1 && messages[i].sender._id !== userId)\r\n  )\r\n    return 0;\r\n  else return \"auto\";\r\n};\r\n\r\nexport const isSameSender = (messages, m, i, userId) => {\r\n  return (\r\n    i < messages.length - 1 &&\r\n    (messages[i + 1].sender._id !== m.sender._id ||\r\n      messages[i + 1].sender._id === undefined) &&\r\n    messages[i].sender._id !== userId\r\n  );\r\n};\r\n\r\nexport const isLastMessage = (messages, i, userId) => {\r\n  return (\r\n    i === messages.length - 1 &&\r\n    messages[messages.length - 1].sender._id !== userId &&\r\n    messages[messages.length - 1].sender._id\r\n  );\r\n};\r\n\r\nexport const isSameUser = (messages, m, i) => {\r\n  return i > 0 && messages[i - 1].sender._id === m.sender._id;\r\n};\r\n\r\nexport const getSender = (loggedUser, users) => {\r\n  return users[0]?._id === loggedUser?._id ? users[1].name : users[0].name;\r\n};\r\n\r\nexport const getSenderFull = (loggedUser, users) => {\r\n  return users[0]._id === loggedUser._id ? users[1] : users[0];\r\n};\r\n","import { ViewIcon } from \"@chakra-ui/icons\";\r\nimport {\r\n  Modal,\r\n  ModalOverlay,\r\n  ModalContent,\r\n  ModalHeader,\r\n  ModalFooter,\r\n  ModalBody,\r\n  ModalCloseButton,\r\n  Button,\r\n  useDisclosure,\r\n  IconButton,\r\n  Text,\r\n  Image,\r\n} from \"@chakra-ui/react\";\r\n\r\nconst ProfileModal = ({ user, children }) => {\r\n  const { isOpen, onOpen, onClose } = useDisclosure();\r\n\r\n  return (\r\n    <>\r\n      {children ? (\r\n        <span onClick={onOpen}>{children}</span>\r\n      ) : (\r\n        <IconButton d={{ base: \"flex\" }} icon={<ViewIcon />} onClick={onOpen} />\r\n      )}\r\n      <Modal size=\"lg\" onClose={onClose} isOpen={isOpen} isCentered>\r\n        <ModalOverlay />\r\n        <ModalContent h=\"410px\">\r\n          <ModalHeader\r\n            fontSize=\"40px\"\r\n            fontFamily=\"Work sans\"\r\n            d=\"flex\"\r\n            justifyContent=\"center\"\r\n          >\r\n            {user.name}\r\n          </ModalHeader>\r\n          <ModalCloseButton />\r\n          <ModalBody\r\n            d=\"flex\"\r\n            flexDir=\"column\"\r\n            alignItems=\"center\"\r\n            justifyContent=\"space-between\"\r\n          >\r\n            <Image\r\n              borderRadius=\"full\"\r\n              boxSize=\"150px\"\r\n              src={user.pic}\r\n              alt={user.name}\r\n            />\r\n            <Text\r\n              fontSize={{ base: \"28px\", md: \"30px\" }}\r\n              fontFamily=\"Work sans\"\r\n            >\r\n              Email: {user.email}\r\n            </Text>\r\n          </ModalBody>\r\n          <ModalFooter>\r\n            <Button onClick={onClose}>Close</Button>\r\n          </ModalFooter>\r\n        </ModalContent>\r\n      </Modal>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ProfileModal;\r\n","import { Avatar } from \"@chakra-ui/avatar\";\r\nimport { Tooltip } from \"@chakra-ui/tooltip\";\r\nimport ScrollableFeed from \"react-scrollable-feed\";\r\nimport {\r\n  isLastMessage,\r\n  isSameSender,\r\n  isSameSenderMargin,\r\n  isSameUser,\r\n} from \"../config/ChatLogics\";\r\nimport { ChatState } from \"../Context/ChatProvider\";\r\n\r\nconst ScrollableChat = ({ messages }) => {\r\n  const { user } = ChatState();\r\n\r\n  return (\r\n    <ScrollableFeed>\r\n      {messages &&\r\n        messages.map((m, i) => (\r\n          <div style={{ display: \"flex\" }} key={m._id}>\r\n            {(isSameSender(messages, m, i, user._id) ||\r\n              isLastMessage(messages, i, user._id)) && (\r\n              <Tooltip label={m.sender.name} placement=\"bottom-start\" hasArrow>\r\n                <Avatar\r\n                  mt=\"7px\"\r\n                  mr={1}\r\n                  size=\"sm\"\r\n                  cursor=\"pointer\"\r\n                  name={m.sender.name}\r\n                  src={m.sender.pic}\r\n                />\r\n              </Tooltip>\r\n            )}\r\n            <span\r\n              style={{\r\n                backgroundColor: `${\r\n                  m.sender._id === user._id ? \"#BEE3F8\" : \"#B9F5D0\"\r\n                }`,\r\n                marginLeft: isSameSenderMargin(messages, m, i, user._id),\r\n                marginTop: isSameUser(messages, m, i, user._id) ? 3 : 10,\r\n                borderRadius: \"20px\",\r\n                padding: \"5px 15px\",\r\n                maxWidth: \"75%\",\r\n              }}\r\n            >\r\n              {m.content}\r\n            </span>\r\n          </div>\r\n        ))}\r\n    </ScrollableFeed>\r\n  );\r\n};\r\n\r\nexport default ScrollableChat;\r\n","import { CloseIcon } from \"@chakra-ui/icons\";\r\nimport { Badge } from \"@chakra-ui/layout\";\r\n\r\nconst UserBadgeItem = ({ user, handleFunction, admin }) => {\r\n  return (\r\n    <Badge\r\n      px={2}\r\n      py={1}\r\n      borderRadius=\"lg\"\r\n      m={1}\r\n      mb={2}\r\n      variant=\"solid\"\r\n      fontSize={12}\r\n      colorScheme=\"purple\"\r\n      cursor=\"pointer\"\r\n      onClick={handleFunction}\r\n    >\r\n      {user.name}\r\n      {admin === user._id && <span> (Admin)</span>}\r\n      <CloseIcon pl={1} />\r\n    </Badge>\r\n  );\r\n};\r\n\r\nexport default UserBadgeItem;\r\n","import { Avatar } from \"@chakra-ui/avatar\";\r\nimport { Box, Text } from \"@chakra-ui/layout\";\r\nimport { ChatState } from \"../../Context/ChatProvider\";\r\n\r\nconst UserListItem = ({ handleFunction }) => {\r\n  const { user } = ChatState();\r\n\r\n  return (\r\n    <Box\r\n      onClick={handleFunction}\r\n      cursor=\"pointer\"\r\n      bg=\"#E8E8E8\"\r\n      _hover={{\r\n        background: \"#38B2AC\",\r\n        color: \"white\",\r\n      }}\r\n      w=\"100%\"\r\n      d=\"flex\"\r\n      alignItems=\"center\"\r\n      color=\"black\"\r\n      px={3}\r\n      py={2}\r\n      mb={2}\r\n      borderRadius=\"lg\"\r\n    >\r\n      <Avatar\r\n        mr={2}\r\n        size=\"sm\"\r\n        cursor=\"pointer\"\r\n        name={user.name}\r\n        src={user.pic}\r\n      />\r\n      <Box>\r\n        <Text>{user.name}</Text>\r\n        <Text fontSize=\"xs\">\r\n          <b>Email : </b>\r\n          {user.email}\r\n        </Text>\r\n      </Box>\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default UserListItem;\r\n","import { ViewIcon } from \"@chakra-ui/icons\";\r\nimport {\r\n  Modal,\r\n  ModalOverlay,\r\n  ModalContent,\r\n  ModalHeader,\r\n  ModalFooter,\r\n  ModalBody,\r\n  ModalCloseButton,\r\n  Button,\r\n  useDisclosure,\r\n  FormControl,\r\n  Input,\r\n  useToast,\r\n  Box,\r\n  IconButton,\r\n  Spinner,\r\n} from \"@chakra-ui/react\";\r\nimport axios from \"axios\";\r\nimport { useState } from \"react\";\r\nimport { ChatState } from \"../../Context/ChatProvider\";\r\nimport UserBadgeItem from \"../userAvatar/UserBadgeItem\";\r\nimport UserListItem from \"../userAvatar/UserListItem\";\r\n\r\nconst UpdateGroupChatModal = ({ fetchMessages, fetchAgain, setFetchAgain }) => {\r\n  const { isOpen, onOpen, onClose } = useDisclosure();\r\n  const [groupChatName, setGroupChatName] = useState();\r\n  const [search, setSearch] = useState(\"\");\r\n  const [searchResult, setSearchResult] = useState([]);\r\n  const [loading, setLoading] = useState(false);\r\n  const [renameloading, setRenameLoading] = useState(false);\r\n  const toast = useToast();\r\n\r\n  const { selectedChat, setSelectedChat, user } = ChatState();\r\n\r\n  const handleSearch = async (query) => {\r\n    setSearch(query);\r\n    if (!query) {\r\n      return;\r\n    }\r\n\r\n    try {\r\n      setLoading(true);\r\n      const config = {\r\n        headers: {\r\n          Authorization: `Bearer ${user.token}`,\r\n        },\r\n      };\r\n      const { data } = await axios.get(`/api/user?search=${search}`, config);\r\n      console.log(data);\r\n      setLoading(false);\r\n      setSearchResult(data);\r\n    } catch (error) {\r\n      toast({\r\n        title: \"Error Occured!\",\r\n        description: \"Failed to Load the Search Results\",\r\n        status: \"error\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom-left\",\r\n      });\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const handleRename = async () => {\r\n    if (!groupChatName) return;\r\n\r\n    try {\r\n      setRenameLoading(true);\r\n      const config = {\r\n        headers: {\r\n          Authorization: `Bearer ${user.token}`,\r\n        },\r\n      };\r\n      const { data } = await axios.put(\r\n        `/api/chat/rename`,\r\n        {\r\n          chatId: selectedChat._id,\r\n          chatName: groupChatName,\r\n        },\r\n        config\r\n      );\r\n\r\n      console.log(data._id);\r\n      // setSelectedChat(\"\");\r\n      setSelectedChat(data);\r\n      setFetchAgain(!fetchAgain);\r\n      setRenameLoading(false);\r\n    } catch (error) {\r\n      toast({\r\n        title: \"Error Occured!\",\r\n        description: error.response.data.message,\r\n        status: \"error\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n      setRenameLoading(false);\r\n    }\r\n    setGroupChatName(\"\");\r\n  };\r\n\r\n  const handleAddUser = async (user1) => {\r\n    if (selectedChat.users.find((u) => u._id === user1._id)) {\r\n      toast({\r\n        title: \"User Already in group!\",\r\n        status: \"error\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n      return;\r\n    }\r\n\r\n    if (selectedChat.groupAdmin._id !== user._id) {\r\n      toast({\r\n        title: \"Only admins can add someone!\",\r\n        status: \"error\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n      return;\r\n    }\r\n\r\n    try {\r\n      setLoading(true);\r\n      const config = {\r\n        headers: {\r\n          Authorization: `Bearer ${user.token}`,\r\n        },\r\n      };\r\n      const { data } = await axios.put(\r\n        `/api/chat/groupadd`,\r\n        {\r\n          chatId: selectedChat._id,\r\n          userId: user1._id,\r\n        },\r\n        config\r\n      );\r\n\r\n      setSelectedChat(data);\r\n      setFetchAgain(!fetchAgain);\r\n      setLoading(false);\r\n    } catch (error) {\r\n      toast({\r\n        title: \"Error Occured!\",\r\n        description: error.response.data.message,\r\n        status: \"error\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n      setLoading(false);\r\n    }\r\n    setGroupChatName(\"\");\r\n  };\r\n\r\n  const handleRemove = async (user1) => {\r\n    if (selectedChat.groupAdmin._id !== user._id && user1._id !== user._id) {\r\n      toast({\r\n        title: \"Only admins can remove someone!\",\r\n        status: \"error\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n      return;\r\n    }\r\n\r\n    try {\r\n      setLoading(true);\r\n      const config = {\r\n        headers: {\r\n          Authorization: `Bearer ${user.token}`,\r\n        },\r\n      };\r\n      const { data } = await axios.put(\r\n        `/api/chat/groupremove`,\r\n        {\r\n          chatId: selectedChat._id,\r\n          userId: user1._id,\r\n        },\r\n        config\r\n      );\r\n\r\n      user1._id === user._id ? setSelectedChat() : setSelectedChat(data);\r\n      setFetchAgain(!fetchAgain);\r\n      fetchMessages();\r\n      setLoading(false);\r\n    } catch (error) {\r\n      toast({\r\n        title: \"Error Occured!\",\r\n        description: error.response.data.message,\r\n        status: \"error\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n      setLoading(false);\r\n    }\r\n    setGroupChatName(\"\");\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <IconButton d={{ base: \"flex\" }} icon={<ViewIcon />} onClick={onOpen} />\r\n\r\n      <Modal onClose={onClose} isOpen={isOpen} isCentered>\r\n        <ModalOverlay />\r\n        <ModalContent>\r\n          <ModalHeader\r\n            fontSize=\"35px\"\r\n            fontFamily=\"Work sans\"\r\n            d=\"flex\"\r\n            justifyContent=\"center\"\r\n          >\r\n            {selectedChat.chatName}\r\n          </ModalHeader>\r\n\r\n          <ModalCloseButton />\r\n          <ModalBody d=\"flex\" flexDir=\"column\" alignItems=\"center\">\r\n            <Box w=\"100%\" d=\"flex\" flexWrap=\"wrap\" pb={3}>\r\n              {selectedChat.users.map((u) => (\r\n                <UserBadgeItem\r\n                  key={u._id}\r\n                  user={u}\r\n                  admin={selectedChat.groupAdmin}\r\n                  handleFunction={() => handleRemove(u)}\r\n                />\r\n              ))}\r\n            </Box>\r\n            <FormControl d=\"flex\">\r\n              <Input\r\n                placeholder=\"Chat Name\"\r\n                mb={3}\r\n                value={groupChatName}\r\n                onChange={(e) => setGroupChatName(e.target.value)}\r\n              />\r\n              <Button\r\n                variant=\"solid\"\r\n                colorScheme=\"teal\"\r\n                ml={1}\r\n                isLoading={renameloading}\r\n                onClick={handleRename}\r\n              >\r\n                Update\r\n              </Button>\r\n            </FormControl>\r\n            <FormControl>\r\n              <Input\r\n                placeholder=\"Add User to group\"\r\n                mb={1}\r\n                onChange={(e) => handleSearch(e.target.value)}\r\n              />\r\n            </FormControl>\r\n\r\n            {loading ? (\r\n              <Spinner size=\"lg\" />\r\n            ) : (\r\n              searchResult?.map((user) => (\r\n                <UserListItem\r\n                  key={user._id}\r\n                  user={user}\r\n                  handleFunction={() => handleAddUser(user)}\r\n                />\r\n              ))\r\n            )}\r\n          </ModalBody>\r\n          <ModalFooter>\r\n            <Button onClick={() => handleRemove(user)} colorScheme=\"red\">\r\n              Leave Group\r\n            </Button>\r\n          </ModalFooter>\r\n        </ModalContent>\r\n      </Modal>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default UpdateGroupChatModal;\r\n","// frontend/src/components/Call.js\r\nimport React, { useEffect, useRef, useState, useCallback } from \"react\";\r\nimport io from \"socket.io-client\";\r\nimport {\r\n  Box,\r\n  Flex,\r\n  Text,\r\n  Button,\r\n  Modal,\r\n  ModalOverlay,\r\n  ModalContent,\r\n  ModalHeader,\r\n  ModalCloseButton,\r\n  ModalBody,\r\n  ModalFooter,\r\n  useDisclosure,\r\n  useToast,\r\n} from \"@chakra-ui/react\";\r\nimport { ChatState } from \"../Context/ChatProvider\";\r\n\r\nconst Call = ({ chatId, onClose }) => {\r\n  const [localStream, setLocalStream] = useState(null);\r\n  const [remoteStream, setRemoteStream] = useState(null);\r\n  const [peerConnection, setPeerConnection] = useState(null);\r\n  const [isAudioMuted, setIsAudioMuted] = useState(false);\r\n  const [isVideoMuted, setIsVideoMuted] = useState(false);\r\n  const [caller, setCaller] = useState(null);\r\n  const [isCallAnswered, setIsCallAnswered] = useState(false);\r\n  const [offer, setOffer] = useState(null); // State to store the offer\r\n\r\n  const { isOpen, onOpen, onClose: onCloseModal } = useDisclosure();\r\n  const localVideoRef = useRef(null);\r\n  const remoteVideoRef = useRef(null);\r\n  const socketRef = useRef();\r\n  const toast = useToast();\r\n  const { user, selectedChat } = ChatState();\r\n  \r\nconst hangUp = () => {\r\n  if (peerConnection) {\r\n    peerConnection.close();\r\n    setPeerConnection(null);\r\n    setLocalStream(null);\r\n    setRemoteStream(null);\r\n    setIsCallAnswered(false);\r\n\r\n    // Emit a 'leave-call' event to the server\r\n    socketRef.current.emit(\"leave-call\", {\r\n      chatId: chatId,\r\n    });\r\n\r\n    onClose(); // Close the call window\r\n  }\r\n};\r\n  useEffect(() => {\r\n    socketRef.current = io(\"http://localhost:5000\"); // Replace with your backend address\r\n\r\n    // Event listener for incoming call\r\n    const handleCallInitiated = (callData) => {\r\n\t\t console.log(\"Call initiated received:\", callData); // Log the received call data\r\n      if (\r\n        callData.receiverId === user._id &&\r\n        callData.chatId === chatId &&\r\n        !isCallAnswered\r\n      ) {\r\n        setCaller(callData.caller);\r\n        setOffer(callData.offer); // Store the offer\r\n        onOpen(); // Open the modal\r\n      }\r\n    };\r\n\r\n    socketRef.current.on(\"call-initiated\", handleCallInitiated);\r\n\r\n    // Event listener for call answered\r\n    const handleCallAnswered = () => {\r\n      setIsCallAnswered(true);\r\n    };\r\n\r\n    socketRef.current.on(\"call-answered\", handleCallAnswered);\r\n\r\n    // Event listener for call rejected\r\n    const handleCallRejected = () => {\r\n      toast({\r\n        title: \"Call Rejected\",\r\n        status: \"error\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n      onClose(); // Close the call window\r\n    };\r\n\r\n    socketRef.current.on(\"call-rejected\", handleCallRejected);\r\n\r\n    const handleIceCandidate = (candidate) => {\r\n      if (peerConnection) {\r\n        peerConnection.addIceCandidate(new RTCIceCandidate(candidate));\r\n      }\r\n    };\r\n\r\n    socketRef.current.on(\"ice-candidate\", handleIceCandidate);\r\n\r\n    socketRef.current.on(\"user-left-call\", () => {\r\n      // Handle the case where the other user left the call\r\n      hangUp();\r\n    });\r\n\r\n    return () => {\r\n      if (socketRef.current) {\r\n        socketRef.current.off(\"call-initiated\", handleCallInitiated);\r\n        socketRef.current.off(\"call-answered\", handleCallAnswered);\r\n        socketRef.current.off(\"call-rejected\", handleCallRejected);\r\n        socketRef.current.off(\"ice-candidate\", handleIceCandidate);\r\n        socketRef.current.off(\"user-left-call\");\r\n        socketRef.current.disconnect();\r\n      }\r\n    };\r\n  }, [chatId, user, isCallAnswered, onOpen, onClose, toast, peerConnection, hangUp]); // Added peerConnection and hangUp as dependencies\r\n  \r\n  useEffect(() => {\r\n    // This effect runs when isCallAnswered changes\r\n    if (isCallAnswered) {\r\n      navigator.mediaDevices\r\n        .getUserMedia({ video: true, audio: true })\r\n        .then((stream) => {\r\n          setLocalStream(stream);\r\n          localVideoRef.current.srcObject = stream;\r\n          createPeerConnection();\r\n        })\r\n        .catch((error) => {\r\n          console.error(\"Error accessing media devices:\", error);\r\n          toast({\r\n            title: \"Error accessing media devices\",\r\n            description: error.message,\r\n            status: \"error\",\r\n            duration: 5000,\r\n            isClosable: true,\r\n            position: \"bottom\",\r\n          });\r\n          onClose();\r\n        });\r\n    }\r\n  }, [isCallAnswered, onClose, toast]);\r\n\r\n  const createPeerConnection = () => {\r\n    const pc = new RTCPeerConnection({\r\n      iceServers: [\r\n        {\r\n          urls: \"stun:stun.l.google.com:19302\",\r\n        },\r\n      ],\r\n    });\r\n\r\n    if (localStream) {\r\n      localStream.getTracks().forEach((track) => pc.addTrack(track, localStream));\r\n    }\r\n\r\n    pc.onicecandidate = (event) => {\r\n      if (event.candidate) {\r\n        socketRef.current.emit(\r\n          \"ice-candidate\",\r\n          event.candidate,\r\n          caller._id,\r\n          chatId\r\n        );\r\n      }\r\n    };\r\n\r\n    pc.ontrack = (event) => {\r\n      setRemoteStream(event.streams[0]);\r\n      remoteVideoRef.current.srcObject = event.streams[0];\r\n    };\r\n\r\n    setPeerConnection(pc);\r\n\r\n    if (offer) {\r\n      // If there's an offer, we're receiving a call\r\n      handleOffer(offer, pc);\r\n    } else {\r\n      // Otherwise, we're initiating a call\r\n      sendOffer(pc);\r\n    }\r\n  };\r\n\r\n  const sendOffer = async (pc) => {\r\n    try {\r\n      const offer = await pc.createOffer();\r\n      await pc.setLocalDescription(offer);\r\n\r\n      // Emit the offer to the server\r\n      socketRef.current.emit(\"call-initiated\", {\r\n        callerId: user._id,\r\n        receiverId: selectedChat.users.find((u) => u._id !== user._id)._id,\r\n        chatId: chatId,\r\n        offer,\r\n      });\r\n    } catch (error) {\r\n      console.error(\"Error creating offer:\", error);\r\n    }\r\n  };\r\n\r\n  const handleOffer = async (offer, pc) => {\r\n    try {\r\n      await pc.setRemoteDescription(new RTCSessionDescription(offer));\r\n      const answer = await pc.createAnswer();\r\n      await pc.setLocalDescription(answer);\r\n\r\n      // Emit the answer to the server\r\n      socketRef.current.emit(\"call-answered\", {\r\n        callerId: caller._id,\r\n        receiverId: user._id,\r\n        chatId: chatId,\r\n        answer,\r\n      });\r\n    } catch (error) {\r\n      console.error(\"Error handling offer:\", error);\r\n    }\r\n  };\r\n\r\n  const answerCall = () => {\r\n    setIsCallAnswered(true);\r\n    onCloseModal(); // Close the modal\r\n  };\r\n\r\n  const rejectCall = () => {\r\n    // Emit a call-rejected event to the server\r\n    socketRef.current.emit(\"call-rejected\", {\r\n      callerId: caller._id,\r\n      receiverId: user._id,\r\n      chatId: chatId,\r\n    });\r\n    onCloseModal(); // Close the modal\r\n    onClose(); // Close the call window\r\n  };\r\n\r\n  const toggleAudioMute = () => {\r\n    if (localStream) {\r\n      localStream.getAudioTracks()[0].enabled = !isAudioMuted;\r\n      setIsAudioMuted(!isAudioMuted);\r\n    }\r\n  };\r\n\r\n  const toggleVideoMute = () => {\r\n    if (localStream) {\r\n      localStream.getVideoTracks()[0].enabled = !isVideoMuted;\r\n      setIsVideoMuted(!isVideoMuted);\r\n    }\r\n  };\r\n\r\n\r\nreturn (\r\n    <Flex direction=\"column\" h=\"100%\" w=\"100%\">\r\n      <Flex\r\n        justifyContent=\"space-between\"\r\n        alignItems=\"center\"\r\n        bg=\"white\"\r\n        p=\"5px 10px 5px 10px\"\r\n        borderWidth=\"5px\"\r\n      >\r\n        <Text fontSize=\"2xl\" fontFamily=\"Work sans\">\r\n          Talk-A-Tive\r\n        </Text>\r\n        <Box>\r\n          <Flex>\r\n            <Button\r\n              onClick={toggleAudioMute}\r\n              mr={2}\r\n              bg={isAudioMuted ? \"red.400\" : \"gray.400\"}\r\n            >\r\n              {isAudioMuted ? \"Unmute Audio\" : \"Mute Audio\"}\r\n            </Button>\r\n            <Button\r\n              onClick={toggleVideoMute}\r\n              mr={2}\r\n              bg={isVideoMuted ? \"red.400\" : \"gray.400\"}\r\n            >\r\n              {isVideoMuted ? \"Unmute Video\" : \"Mute Video\"}\r\n            </Button>\r\n            <Button colorScheme=\"red\" onClick={hangUp}>\r\n              End Call\r\n            </Button>\r\n          </Flex>\r\n        </Box>\r\n      </Flex>\r\n\r\n      <Flex\r\n        flex={1}\r\n        justifyContent=\"center\"\r\n        alignItems=\"center\"\r\n        bg=\"gray.200\"\r\n      >\r\n        <video ref={localVideoRef} autoPlay muted />\r\n        {remoteStream && <video ref={remoteVideoRef} autoPlay />} {/* Render remote video only if remoteStream is available */}\r\n      </Flex>\r\n\r\n      {/* Incoming call modal */}\r\n      <Modal isOpen={isOpen} onClose={onCloseModal}>\r\n        <ModalOverlay />\r\n        <ModalContent>\r\n          <ModalHeader>Incoming Call</ModalHeader>\r\n          <ModalCloseButton />\r\n          <ModalBody>\r\n            {caller && <Text>Call from {caller.name}</Text>} {/* Display caller's name if available */}\r\n          </ModalBody>\r\n          <ModalFooter>\r\n            <Button colorScheme=\"green\" mr={3} onClick={answerCall}>\r\n              Answer\r\n            </Button>\r\n            <Button variant=\"ghost\" onClick={rejectCall}>\r\n              Decline\r\n            </Button>\r\n          </ModalFooter>\r\n        </ModalContent>\r\n      </Modal>\r\n    </Flex>\r\n  );\r\n};\r\n\r\nexport default Call;","import { FormControl } from \"@chakra-ui/form-control\";\r\nimport { Input } from \"@chakra-ui/input\";\r\nimport { Box, Text } from \"@chakra-ui/layout\";\r\nimport \"./styles.css\";\r\nimport { IconButton, Spinner, useToast } from \"@chakra-ui/react\";\r\nimport { getSender, getSenderFull } from \"../config/ChatLogics\";\r\nimport { useEffect, useState } from \"react\";\r\nimport axios from \"axios\";\r\nimport { ArrowBackIcon, PhoneIcon } from \"@chakra-ui/icons\";\r\nimport ProfileModal from \"./miscellaneous/ProfileModal\";\r\nimport ScrollableChat from \"./ScrollableChat\";\r\nimport Lottie from \"react-lottie\";\r\nimport animationData from \"../animations/typing.json\";\r\nimport io from \"socket.io-client\";\r\nimport UpdateGroupChatModal from \"./miscellaneous/UpdateGroupChatModal\";\r\nimport { ChatState } from \"../Context/ChatProvider\";\r\nimport { v4 as uuidv4 } from \"uuid\"; // Import uuid\r\nimport Call from \"./Call\"; // Import Call component\r\n\r\nconst ENDPOINT = \"http://localhost:5000\"; // Change this after deployment\r\n\r\nvar socket, selectedChatCompare;\r\n\r\nconst SingleChat = ({ fetchAgain, setFetchAgain }) => {\r\n  const [messages, setMessages] = useState([]);\r\n  const [loading, setLoading] = useState(false);\r\n  const [newMessage, setNewMessage] = useState(\"\");\r\n  const [socketConnected, setSocketConnected] = useState(false);\r\n  const [typing, setTyping] = useState(false);\r\n  const [istyping, setIsTyping] = useState(false);\r\n  const toast = useToast();\r\n\r\n  // Call state\r\n  const [isCallInitiated, setIsCallInitiated] = useState(false);\r\n  const [roomId, setRoomId] = useState(null);\r\n\r\n  const defaultOptions = {\r\n    loop: true,\r\n    autoplay: true,\r\n    animationData: animationData,\r\n    rendererSettings: {\r\n      preserveAspectRatio: \"xMidYMid slice\",\r\n    },\r\n  };\r\n\r\n  const { selectedChat, setSelectedChat, user, notification, setNotification } =\r\n    ChatState();\r\n\r\n  const fetchMessages = async () => {\r\n    if (!selectedChat) return;\r\n\r\n    try {\r\n      const config = {\r\n        headers: {\r\n          Authorization: `Bearer ${user.token}`,\r\n        },\r\n      };\r\n\r\n      setLoading(true);\r\n\r\n      const { data } = await axios.get(\r\n        `/api/message/${selectedChat._id}`,\r\n        config\r\n      );\r\n      setMessages(data);\r\n      setLoading(false);\r\n\r\n      socket.emit(\"join chat\", selectedChat._id);\r\n    } catch (error) {\r\n      toast({\r\n        title: \"Error Occurred!\",\r\n        description: \"Failed to Load the Messages\",\r\n        status: \"error\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n    }\r\n  };\r\n\r\n  const sendMessage = async (event) => {\r\n    if (event.key === \"Enter\" && newMessage) {\r\n      socket.emit(\"stop typing\", selectedChat._id);\r\n\r\n      try {\r\n        const config = {\r\n          headers: {\r\n            \"Content-type\": \"application/json\",\r\n            Authorization: `Bearer ${user.token}`,\r\n          },\r\n        };\r\n        setNewMessage(\"\");\r\n\r\n        const { data } = await axios.post(\r\n          \"/api/message\",\r\n          {\r\n            content: newMessage,\r\n            chatId: selectedChat,\r\n          },\r\n          config\r\n        );\r\n\r\n        socket.emit(\"new message\", data);\r\n        setMessages([...messages, data]);\r\n      } catch (error) {\r\n        toast({\r\n          title: \"Error Occurred!\",\r\n          description: \"Failed to send the Message\",\r\n          status: \"error\",\r\n          duration: 5000,\r\n          isClosable: true,\r\n          position: \"bottom\",\r\n        });\r\n      }\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    socket = io(ENDPOINT);\r\n    socket.emit(\"setup\", user);\r\n    socket.on(\"connected\", () => setSocketConnected(true));\r\n    socket.on(\"typing\", () => setIsTyping(true));\r\n    socket.on(\"stop typing\", () => setIsTyping(false));\r\n\r\n    // Handle incoming call\r\n    socket.on(\"call initiated\", (data) => {\r\n      if (data.chatId === selectedChat._id && data.caller !== user) {\r\n        setRoomId(data.roomId);\r\n        setIsCallInitiated(true);\r\n        toast({\r\n          title: \"Incoming Call\",\r\n          description: `${data.caller.name} is calling you!`,\r\n          status: \"info\",\r\n          duration: 5000,\r\n          isClosable: true,\r\n          position: \"bottom\",\r\n        });\r\n      }\r\n    });\r\n\r\n    socket.on(\"call ended\", () => {\r\n      setIsCallInitiated(false);\r\n      setRoomId(null);\r\n    });\r\n\r\n    // eslint-disable-next-line\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    fetchMessages();\r\n    selectedChatCompare = selectedChat;\r\n    // eslint-disable-next-line\r\n  }, [selectedChat]);\r\n\r\n  useEffect(() => {\r\n    socket.on(\"message received\", (newMessageReceived) => {\r\n      if (\r\n        !selectedChatCompare || // if chat is not selected or doesn't match current chat\r\n        selectedChatCompare._id !== newMessageReceived.chat._id\r\n      ) {\r\n        if (!notification.includes(newMessageReceived)) {\r\n          setNotification([newMessageReceived, ...notification]);\r\n          setFetchAgain(!fetchAgain);\r\n        }\r\n      } else {\r\n        setMessages([...messages, newMessageReceived]);\r\n      }\r\n    });\r\n  });\r\n\r\n  const typingHandler = (e) => {\r\n    setNewMessage(e.target.value);\r\n\r\n    if (!socketConnected) return;\r\n\r\n    if (!typing) {\r\n      setTyping(true);\r\n      socket.emit(\"typing\", selectedChat._id);\r\n    }\r\n\r\n    let lastTypingTime = new Date().getTime();\r\n    var timerLength = 3000;\r\n    setTimeout(() => {\r\n      var timeNow = new Date().getTime();\r\n      var timeDiff = timeNow - lastTypingTime;\r\n      if (timeDiff >= timerLength && typing) {\r\n        socket.emit(\"stop typing\", selectedChat._id);\r\n        setTyping(false);\r\n      }\r\n    }, timerLength);\r\n  };\r\n\r\n  // Call initiation and termination\r\n  const handleCallInitiate = () => {\r\n    try {\r\n      const newRoomId = uuidv4(); // Generate unique room ID\r\n      setRoomId(newRoomId);\r\n      setIsCallInitiated(true);\r\n      // Notify other user about the call initiation\r\n      socket.emit(\"call initiated\", {\r\n        chatId: selectedChat._id,\r\n        roomId: newRoomId,\r\n        caller: user,\r\n      });\r\n    } catch (error) {\r\n      toast({\r\n        title: \"Call Failed\",\r\n        description: \"Unable to initiate the call. Please try again.\",\r\n        status: \"error\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n    }\r\n  };\r\n\r\n  const handleCallClose = () => {\r\n    socket.emit(\"call ended\", { chatId: selectedChat._id });\r\n    setIsCallInitiated(false);\r\n    setRoomId(null);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      {selectedChat ? (\r\n        <>\r\n          <Text\r\n            fontSize={{ base: \"28px\", md: \"30px\" }}\r\n            pb={3}\r\n            px={2}\r\n            w=\"100%\"\r\n            fontFamily=\"Work sans\"\r\n            display=\"flex\"\r\n            justifyContent={{ base: \"space-between\" }}\r\n            alignItems=\"center\"\r\n          >\r\n            <IconButton\r\n              display={{ base: \"flex\", md: \"none\" }}\r\n              icon={<ArrowBackIcon />}\r\n              onClick={() => setSelectedChat(\"\")}\r\n            />\r\n            {messages &&\r\n              (!selectedChat.isGroupChat ? (\r\n                <>\r\n                  {getSender(user, selectedChat.users)}\r\n                  <ProfileModal user={getSenderFull(user, selectedChat.users)} />\r\n                </>\r\n              ) : (\r\n                <>\r\n                  {selectedChat.chatName.toUpperCase()}\r\n                  <UpdateGroupChatModal\r\n                    fetchMessages={fetchMessages}\r\n                    fetchAgain={fetchAgain}\r\n                    setFetchAgain={setFetchAgain}\r\n                  />\r\n                </>\r\n              ))}\r\n          </Text>\r\n          <Box\r\n            display=\"flex\"\r\n            flexDir=\"column\"\r\n            justifyContent=\"flex-end\"\r\n            p={3}\r\n            bg=\"#E8E8E8\"\r\n            w=\"100%\"\r\n            h=\"100%\"\r\n            borderRadius=\"lg\"\r\n            overflowY=\"hidden\"\r\n          >\r\n            {loading ? (\r\n              <Spinner\r\n                size=\"xl\"\r\n                w={20}\r\n                h={20}\r\n                alignSelf=\"center\"\r\n                margin=\"auto\"\r\n              />\r\n            ) : (\r\n              <div className=\"messages\">\r\n                <ScrollableChat messages={messages} />\r\n              </div>\r\n            )}\r\n\r\n            <FormControl onKeyDown={sendMessage} id=\"first-name\" isRequired mt={3}>\r\n              {istyping ? (\r\n                <div>\r\n                  <Lottie\r\n                    options={defaultOptions}\r\n                    width={70}\r\n                    style={{ marginBottom: 15, marginLeft: 0 }}\r\n                  />\r\n                </div>\r\n              ) : (\r\n                <></>\r\n              )}\r\n              <Input\r\n                variant=\"filled\"\r\n                bg=\"#E0E0E0\"\r\n                placeholder=\"Enter a message..\"\r\n                value={newMessage}\r\n                onChange={typingHandler}\r\n              />\r\n            </FormControl>\r\n          </Box>\r\n\r\n          {/* Call component */}\r\n          <Box>\r\n            {!isCallInitiated && (\r\n              <IconButton\r\n                aria-label=\"Call\"\r\n                icon={<PhoneIcon />}\r\n                onClick={handleCallInitiate}\r\n              />\r\n            )}\r\n            {isCallInitiated && roomId && (\r\n              <Call roomId={roomId} onClose={handleCallClose} />\r\n            )}\r\n          </Box>\r\n        </>\r\n      ) : (\r\n        <Box\r\n          display=\"flex\"\r\n          alignItems=\"center\"\r\n          justifyContent=\"center\"\r\n          h=\"100%\"\r\n        >\r\n          <Text fontSize=\"3xl\" pb={3} fontFamily=\"Work sans\">\r\n            Click on a user to start chatting\r\n          </Text>\r\n        </Box>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default SingleChat;\r\n","import { Box } from \"@chakra-ui/layout\";\r\nimport \"./styles.css\";\r\nimport SingleChat from \"./SingleChat\";\r\nimport { ChatState } from \"../Context/ChatProvider\";\r\n\r\nconst Chatbox = ({ fetchAgain, setFetchAgain }) => {\r\n  const { selectedChat } = ChatState();\r\n\r\n  return (\r\n    <Box\r\n      d={{ base: selectedChat ? \"flex\" : \"none\", md: \"flex\" }}\r\n      alignItems=\"center\"\r\n      flexDir=\"column\"\r\n      p={3}\r\n      bg=\"white\"\r\n      w={{ base: \"100%\", md: \"68%\" }}\r\n      borderRadius=\"lg\"\r\n      borderWidth=\"1px\"\r\n    >\r\n      <SingleChat fetchAgain={fetchAgain} setFetchAgain={setFetchAgain} />\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default Chatbox;\r\n","import { Stack } from \"@chakra-ui/layout\";\r\nimport { Skeleton } from \"@chakra-ui/skeleton\";\r\n\r\nconst ChatLoading = () => {\r\n  return (\r\n    <Stack>\r\n      <Skeleton height=\"45px\" />\r\n      <Skeleton height=\"45px\" />\r\n      <Skeleton height=\"45px\" />\r\n      <Skeleton height=\"45px\" />\r\n      <Skeleton height=\"45px\" />\r\n      <Skeleton height=\"45px\" />\r\n      <Skeleton height=\"45px\" />\r\n      <Skeleton height=\"45px\" />\r\n      <Skeleton height=\"45px\" />\r\n      <Skeleton height=\"45px\" />\r\n      <Skeleton height=\"45px\" />\r\n      <Skeleton height=\"45px\" />\r\n    </Stack>\r\n  );\r\n};\r\n\r\nexport default ChatLoading;\r\n","import {\r\n  Modal,\r\n  ModalOverlay,\r\n  ModalContent,\r\n  ModalHeader,\r\n  ModalFooter,\r\n  ModalBody,\r\n  ModalCloseButton,\r\n  Button,\r\n  useDisclosure,\r\n  FormControl,\r\n  Input,\r\n  useToast,\r\n  Box,\r\n} from \"@chakra-ui/react\";\r\nimport axios from \"axios\";\r\nimport { useState } from \"react\";\r\nimport { ChatState } from \"../../Context/ChatProvider\";\r\nimport UserBadgeItem from \"../userAvatar/UserBadgeItem\";\r\nimport UserListItem from \"../userAvatar/UserListItem\";\r\n\r\nconst GroupChatModal = ({ children }) => {\r\n  const { isOpen, onOpen, onClose } = useDisclosure();\r\n  const [groupChatName, setGroupChatName] = useState();\r\n  const [selectedUsers, setSelectedUsers] = useState([]);\r\n  const [search, setSearch] = useState(\"\");\r\n  const [searchResult, setSearchResult] = useState([]);\r\n  const [loading, setLoading] = useState(false);\r\n  const toast = useToast();\r\n\r\n  const { user, chats, setChats } = ChatState();\r\n\r\n  const handleGroup = (userToAdd) => {\r\n    if (selectedUsers.includes(userToAdd)) {\r\n      toast({\r\n        title: \"User already added\",\r\n        status: \"warning\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"top\",\r\n      });\r\n      return;\r\n    }\r\n\r\n    setSelectedUsers([...selectedUsers, userToAdd]);\r\n  };\r\n\r\n  const handleSearch = async (query) => {\r\n    setSearch(query);\r\n    if (!query) {\r\n      return;\r\n    }\r\n\r\n    try {\r\n      setLoading(true);\r\n      const config = {\r\n        headers: {\r\n          Authorization: `Bearer ${user.token}`,\r\n        },\r\n      };\r\n      const { data } = await axios.get(`/api/user?search=${search}`, config);\r\n      console.log(data);\r\n      setLoading(false);\r\n      setSearchResult(data);\r\n    } catch (error) {\r\n      toast({\r\n        title: \"Error Occured!\",\r\n        description: \"Failed to Load the Search Results\",\r\n        status: \"error\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom-left\",\r\n      });\r\n    }\r\n  };\r\n\r\n  const handleDelete = (delUser) => {\r\n    setSelectedUsers(selectedUsers.filter((sel) => sel._id !== delUser._id));\r\n  };\r\n\r\n  const handleSubmit = async () => {\r\n    if (!groupChatName || !selectedUsers) {\r\n      toast({\r\n        title: \"Please fill all the feilds\",\r\n        status: \"warning\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"top\",\r\n      });\r\n      return;\r\n    }\r\n\r\n    try {\r\n      const config = {\r\n        headers: {\r\n          Authorization: `Bearer ${user.token}`,\r\n        },\r\n      };\r\n      const { data } = await axios.post(\r\n        `/api/chat/group`,\r\n        {\r\n          name: groupChatName,\r\n          users: JSON.stringify(selectedUsers.map((u) => u._id)),\r\n        },\r\n        config\r\n      );\r\n      setChats([data, ...chats]);\r\n      onClose();\r\n      toast({\r\n        title: \"New Group Chat Created!\",\r\n        status: \"success\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n    } catch (error) {\r\n      toast({\r\n        title: \"Failed to Create the Chat!\",\r\n        description: error.response.data,\r\n        status: \"error\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <span onClick={onOpen}>{children}</span>\r\n\r\n      <Modal onClose={onClose} isOpen={isOpen} isCentered>\r\n        <ModalOverlay />\r\n        <ModalContent>\r\n          <ModalHeader\r\n            fontSize=\"35px\"\r\n            fontFamily=\"Work sans\"\r\n            d=\"flex\"\r\n            justifyContent=\"center\"\r\n          >\r\n            Create Group Chat\r\n          </ModalHeader>\r\n          <ModalCloseButton />\r\n          <ModalBody d=\"flex\" flexDir=\"column\" alignItems=\"center\">\r\n            <FormControl>\r\n              <Input\r\n                placeholder=\"Chat Name\"\r\n                mb={3}\r\n                onChange={(e) => setGroupChatName(e.target.value)}\r\n              />\r\n            </FormControl>\r\n            <FormControl>\r\n              <Input\r\n                placeholder=\"Add Users eg: John, Piyush, Jane\"\r\n                mb={1}\r\n                onChange={(e) => handleSearch(e.target.value)}\r\n              />\r\n            </FormControl>\r\n            <Box w=\"100%\" d=\"flex\" flexWrap=\"wrap\">\r\n              {selectedUsers.map((u) => (\r\n                <UserBadgeItem\r\n                  key={u._id}\r\n                  user={u}\r\n                  handleFunction={() => handleDelete(u)}\r\n                />\r\n              ))}\r\n            </Box>\r\n            {loading ? (\r\n              // <ChatLoading />\r\n              <div>Loading...</div>\r\n            ) : (\r\n              searchResult\r\n                ?.slice(0, 4)\r\n                .map((user) => (\r\n                  <UserListItem\r\n                    key={user._id}\r\n                    user={user}\r\n                    handleFunction={() => handleGroup(user)}\r\n                  />\r\n                ))\r\n            )}\r\n          </ModalBody>\r\n          <ModalFooter>\r\n            <Button onClick={handleSubmit} colorScheme=\"blue\">\r\n              Create Chat\r\n            </Button>\r\n          </ModalFooter>\r\n        </ModalContent>\r\n      </Modal>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default GroupChatModal;\r\n","import { AddIcon } from \"@chakra-ui/icons\";\r\nimport { Box, Stack, Text } from \"@chakra-ui/layout\";\r\nimport { useToast } from \"@chakra-ui/toast\";\r\nimport axios from \"axios\";\r\nimport { useEffect, useState } from \"react\";\r\nimport { getSender } from \"../config/ChatLogics\";\r\nimport ChatLoading from \"./ChatLoading\";\r\nimport GroupChatModal from \"./miscellaneous/GroupChatModal\";\r\nimport { Button } from \"@chakra-ui/react\";\r\nimport { ChatState } from \"../Context/ChatProvider\";\r\n\r\nconst MyChats = ({ fetchAgain }) => {\r\n  const [loggedUser, setLoggedUser] = useState();\r\n\r\n  const { selectedChat, setSelectedChat, user, chats, setChats } = ChatState();\r\n\r\n  const toast = useToast();\r\n\r\n  const fetchChats = async () => {\r\n    // console.log(user._id);\r\n    try {\r\n      const config = {\r\n        headers: {\r\n          Authorization: `Bearer ${user.token}`,\r\n        },\r\n      };\r\n\r\n      const { data } = await axios.get(\"/api/chat\", config);\r\n      setChats(data);\r\n    } catch (error) {\r\n      toast({\r\n        title: \"Error Occured!\",\r\n        description: \"Failed to Load the chats\",\r\n        status: \"error\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom-left\",\r\n      });\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    setLoggedUser(JSON.parse(localStorage.getItem(\"userInfo\")));\r\n    fetchChats();\r\n    // eslint-disable-next-line\r\n  }, [fetchAgain]);\r\n\r\n  return (\r\n    <Box\r\n      d={{ base: selectedChat ? \"none\" : \"flex\", md: \"flex\" }}\r\n      flexDir=\"column\"\r\n      alignItems=\"center\"\r\n      p={3}\r\n      bg=\"white\"\r\n      w={{ base: \"100%\", md: \"31%\" }}\r\n      borderRadius=\"lg\"\r\n      borderWidth=\"1px\"\r\n    >\r\n      <Box\r\n        pb={3}\r\n        px={3}\r\n        fontSize={{ base: \"28px\", md: \"30px\" }}\r\n        fontFamily=\"Work sans\"\r\n        d=\"flex\"\r\n        w=\"100%\"\r\n        justifyContent=\"space-between\"\r\n        alignItems=\"center\"\r\n      >\r\n        My Chats\r\n        <GroupChatModal>\r\n          <Button\r\n            d=\"flex\"\r\n            fontSize={{ base: \"17px\", md: \"10px\", lg: \"17px\" }}\r\n            rightIcon={<AddIcon />}\r\n          >\r\n            New Group Chat\r\n          </Button>\r\n        </GroupChatModal>\r\n      </Box>\r\n      <Box\r\n        d=\"flex\"\r\n        flexDir=\"column\"\r\n        p={3}\r\n        bg=\"#F8F8F8\"\r\n        w=\"100%\"\r\n        h=\"100%\"\r\n        borderRadius=\"lg\"\r\n        overflowY=\"hidden\"\r\n      >\r\n        {chats ? (\r\n          <Stack overflowY=\"scroll\">\r\n            {chats.map((chat) => (\r\n              <Box\r\n                onClick={() => setSelectedChat(chat)}\r\n                cursor=\"pointer\"\r\n                bg={selectedChat === chat ? \"#38B2AC\" : \"#E8E8E8\"}\r\n                color={selectedChat === chat ? \"white\" : \"black\"}\r\n                px={3}\r\n                py={2}\r\n                borderRadius=\"lg\"\r\n                key={chat._id}\r\n              >\r\n                <Text>\r\n                  {!chat.isGroupChat\r\n                    ? getSender(loggedUser, chat.users)\r\n                    : chat.chatName}\r\n                </Text>\r\n                {chat.latestMessage && (\r\n                  <Text fontSize=\"xs\">\r\n                    <b>{chat.latestMessage.sender.name} : </b>\r\n                    {chat.latestMessage.content.length > 50\r\n                      ? chat.latestMessage.content.substring(0, 51) + \"...\"\r\n                      : chat.latestMessage.content}\r\n                  </Text>\r\n                )}\r\n              </Box>\r\n            ))}\r\n          </Stack>\r\n        ) : (\r\n          <ChatLoading />\r\n        )}\r\n      </Box>\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default MyChats;\r\n","import { Button } from \"@chakra-ui/button\";\r\nimport { useDisclosure } from \"@chakra-ui/hooks\";\r\nimport { Input } from \"@chakra-ui/input\";\r\nimport { Box, Text } from \"@chakra-ui/layout\";\r\nimport {\r\n  Menu,\r\n  MenuButton,\r\n  MenuDivider,\r\n  MenuItem,\r\n  MenuList,\r\n} from \"@chakra-ui/menu\";\r\nimport {\r\n  Drawer,\r\n  DrawerBody,\r\n  DrawerContent,\r\n  DrawerHeader,\r\n  DrawerOverlay,\r\n} from \"@chakra-ui/modal\";\r\nimport { Tooltip } from \"@chakra-ui/tooltip\";\r\nimport { BellIcon, ChevronDownIcon } from \"@chakra-ui/icons\";\r\nimport { Avatar } from \"@chakra-ui/avatar\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { useState } from \"react\";\r\nimport axios from \"axios\";\r\nimport { useToast } from \"@chakra-ui/toast\";\r\nimport ChatLoading from \"../ChatLoading\";\r\nimport { Spinner } from \"@chakra-ui/spinner\";\r\nimport ProfileModal from \"./ProfileModal\";\r\nimport NotificationBadge from \"react-notification-badge\";\r\nimport { Effect } from \"react-notification-badge\";\r\nimport { getSender } from \"../../config/ChatLogics\";\r\nimport UserListItem from \"../userAvatar/UserListItem\";\r\nimport { ChatState } from \"../../Context/ChatProvider\";\r\n\r\nfunction SideDrawer() {\r\n  const [search, setSearch] = useState(\"\");\r\n  const [searchResult, setSearchResult] = useState([]);\r\n  const [loading, setLoading] = useState(false);\r\n  const [loadingChat, setLoadingChat] = useState(false);\r\n\r\n  const {\r\n    setSelectedChat,\r\n    user,\r\n    notification,\r\n    setNotification,\r\n    chats,\r\n    setChats,\r\n  } = ChatState();\r\n\r\n  const toast = useToast();\r\n  const { isOpen, onOpen, onClose } = useDisclosure();\r\n  const history = useHistory();\r\n\r\n  const logoutHandler = () => {\r\n    localStorage.removeItem(\"userInfo\");\r\n    history.push(\"/\");\r\n  };\r\n\r\n  const handleSearch = async () => {\r\n    if (!search) {\r\n      toast({\r\n        title: \"Please Enter something in search\",\r\n        status: \"warning\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"top-left\",\r\n      });\r\n      return;\r\n    }\r\n\r\n    try {\r\n      setLoading(true);\r\n\r\n      const config = {\r\n        headers: {\r\n          Authorization: `Bearer ${user.token}`,\r\n        },\r\n      };\r\n\r\n      const { data } = await axios.get(`/api/user?search=${search}`, config);\r\n\r\n      setLoading(false);\r\n      setSearchResult(data);\r\n    } catch (error) {\r\n      toast({\r\n        title: \"Error Occured!\",\r\n        description: \"Failed to Load the Search Results\",\r\n        status: \"error\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom-left\",\r\n      });\r\n    }\r\n  };\r\n\r\n  const accessChat = async (userId) => {\r\n    console.log(userId);\r\n\r\n    try {\r\n      setLoadingChat(true);\r\n      const config = {\r\n        headers: {\r\n          \"Content-type\": \"application/json\",\r\n          Authorization: `Bearer ${user.token}`,\r\n        },\r\n      };\r\n      const { data } = await axios.post(`/api/chat`, { userId }, config);\r\n\r\n      if (!chats.find((c) => c._id === data._id)) setChats([data, ...chats]);\r\n      setSelectedChat(data);\r\n      setLoadingChat(false);\r\n      onClose();\r\n    } catch (error) {\r\n      toast({\r\n        title: \"Error fetching the chat\",\r\n        description: error.message,\r\n        status: \"error\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom-left\",\r\n      });\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Box\r\n        d=\"flex\"\r\n        justifyContent=\"space-between\"\r\n        alignItems=\"center\"\r\n        bg=\"white\"\r\n        w=\"100%\"\r\n        p=\"5px 10px 5px 10px\"\r\n        borderWidth=\"5px\"\r\n      >\r\n        <Tooltip label=\"Search Users to chat\" hasArrow placement=\"bottom-end\">\r\n          <Button\r\n            variant=\"ghost\"\r\n            onClick={onOpen}\r\n            color=\"black\" // Set text color to black\r\n          >\r\n            <i className=\"fas fa-search\"></i>\r\n            <Text d={{ base: \"none\", md: \"flex\" }} px={4} color=\"black\">\r\n              Search User\r\n            </Text>\r\n          </Button>\r\n        </Tooltip>\r\n        <Text d={{ base: \"none\", md: \"flex\" }} px={7} color=\"black\" fontWeight=\"bold\" fontSize=\"xl\">\r\n\t\t\t CHARIZARD-CHATTER\r\n\t\t</Text>\r\n        <div>\r\n          <Menu>\r\n            <MenuButton p={1}>\r\n              <NotificationBadge\r\n                count={notification.length}\r\n                effect={Effect.SCALE}\r\n              />\r\n              <BellIcon fontSize=\"2xl\" m={1} />\r\n            </MenuButton>\r\n            <MenuList pl={2}>\r\n              {!notification.length && \"No New Messages\"}\r\n              {notification.map((notif) => (\r\n                <MenuItem\r\n                  key={notif._id}\r\n                  onClick={() => {\r\n                    setSelectedChat(notif.chat);\r\n                    setNotification(notification.filter((n) => n !== notif));\r\n                  }}\r\n                >\r\n                  {notif.chat.isGroupChat\r\n                    ? `New Message in ${notif.chat.chatName}`\r\n                    : `New Message from ${getSender(user, notif.chat.users)}`}\r\n                </MenuItem>\r\n              ))}\r\n            </MenuList>\r\n          </Menu>\r\n          <Menu>\r\n            <MenuButton as={Button} bg=\"white\" rightIcon={<ChevronDownIcon />} color=\"black\">\r\n              <Avatar\r\n                size=\"sm\"\r\n                cursor=\"pointer\"\r\n                name={user.name}\r\n                src={user.pic}\r\n              />\r\n            </MenuButton>\r\n            <MenuList>\r\n              <ProfileModal user={user}>\r\n                <MenuItem color=\"black\">My Profile</MenuItem>\r\n              </ProfileModal>\r\n              <MenuDivider />\r\n              <MenuItem onClick={logoutHandler} color=\"black\">Logout</MenuItem>\r\n            </MenuList>\r\n          </Menu>\r\n        </div>\r\n      </Box>\r\n\r\n      <Drawer placement=\"left\" onClose={onClose} isOpen={isOpen}>\r\n        <DrawerOverlay />\r\n        <DrawerContent>\r\n          <DrawerHeader borderBottomWidth=\"1px\">Search Users</DrawerHeader>\r\n          <DrawerBody>\r\n            <Box d=\"flex\" pb={2}>\r\n              <Input\r\n                placeholder=\"Search by name or email\"\r\n                mr={2}\r\n                value={search}\r\n                onChange={(e) => setSearch(e.target.value)}\r\n              />\r\n              <Button onClick={handleSearch} color=\"black\">Go</Button>\r\n            </Box>\r\n            {loading ? (\r\n              <ChatLoading />\r\n            ) : (\r\n              searchResult?.map((user) => (\r\n                <UserListItem\r\n                  key={user._id}\r\n                  user={user}\r\n                  handleFunction={() => accessChat(user._id)}\r\n                />\r\n              ))\r\n            )}\r\n            {loadingChat && <Spinner ml=\"auto\" d=\"flex\" />}\r\n          </DrawerBody>\r\n        </DrawerContent>\r\n      </Drawer>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default SideDrawer;\r\n","import { Box, Tab, TabList, Tabs } from \"@chakra-ui/react\";\r\nimport { useState } from \"react\";\r\nimport Chatbox from \"../components/Chatbox\";\r\nimport MyChats from \"../components/MyChats\";\r\nimport SideDrawer from \"../components/miscellaneous/SideDrawer\";\r\nimport { ChatState } from \"../Context/ChatProvider\";\r\n\r\nconst Chatpage = () => {\r\n  const [fetchAgain, setFetchAgain] = useState(false);\r\n  const { user } = ChatState();\r\n  const [activeTab, setActiveTab] = useState(\"userChat\");\r\n\r\n  return (\r\n    <div style={{ width: \"100%\" }}>\r\n      {user && <SideDrawer />}\r\n      <Box d=\"flex\" flexDirection=\"column\" w=\"100%\" h=\"91.5vh\" p=\"10px\">\r\n        <Tabs isLazy onChange={(index) => setActiveTab(index === 0 ? \"userChat\" : \"aiChat\")}>\r\n          <TabList>\r\n            <Tab>User Chat</Tab>\r\n          </TabList>\r\n\r\n          <Box d={activeTab === \"userChat\" ? \"flex\" : \"none\"} justifyContent=\"space-between\" w=\"100%\" h=\"100%\">\r\n            {user && <MyChats fetchAgain={fetchAgain} />}\r\n            {user && (\r\n              <Chatbox fetchAgain={fetchAgain} setFetchAgain={setFetchAgain} />\r\n            )}\r\n          </Box>\r\n        </Tabs>\r\n      </Box>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Chatpage;","import \"./App.css\";\r\nimport Homepage from \"./Pages/Homepage\";\r\nimport { Route } from \"react-router-dom\";\r\nimport Chatpage from \"./Pages/Chatpage\";\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <Route path=\"/\" component={Homepage} exact />\r\n      <Route path=\"/chats\" component={Chatpage} />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport reportWebVitals from \"./reportWebVitals\";\r\nimport { ChakraProvider } from \"@chakra-ui/react\";\r\nimport ChatProvider from \"./Context/ChatProvider\";\r\nimport { BrowserRouter } from \"react-router-dom\";\r\n\r\nReactDOM.render(\r\n  <ChakraProvider>\r\n    <BrowserRouter>\r\n      <ChatProvider>\r\n        <App />\r\n      </ChatProvider>\r\n    </BrowserRouter>\r\n  </ChakraProvider>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}